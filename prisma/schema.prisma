generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SuperAdmin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("super_admin")
}

model Company {
  id         Int        @id @default(autoincrement())
  name       String
  email      String     @unique
  password   String
  isApproved Boolean    @default(false)
  createdAt  DateTime   @default(now())
  timezone   String     @default("UTC")
  bookings   Booking[]
  drivers    Driver[]
  customers  Customer[]
  users      User[]
  roles      Role[]

  @@map("company")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  roleId    Int
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())

  @@map("user")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  companyId   Int
  company     Company          @relation(fields: [companyId], references: [id])
  permissions RolePermission[]
  users       User[]

  @@map("role")
}

model Permission {
  id    Int              @id @default(autoincrement())
  name  String           @unique
  roles RolePermission[]

  @@map("permission")
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
  @@map("role_permission")
}

model Driver {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  phone       String
  status      DriverStatus @default(offline)
  vehicleInfo String
  companyId   Int
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  location    Location?

  bookings     Booking[]
  availability DriverAvailability[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("driver")
}

model DriverAvailability {
  id        Int      @id @default(autoincrement())
  driverId  Int
  startTime DateTime
  endTime   DateTime
  driver    Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@map("driver_availability")
}

model Customer {
  id        Int     @id @default(autoincrement())
  name      String
  email     String  @unique
  phone     String
  companyId Int
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  bookings Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customer")
}

model Booking {
  id          Int           @id @default(autoincrement())
  customerId  Int
  driverId    Int?
  companyId   Int
  pickup      String
  dropoff     String
  status      BookingStatus @default(pending)
  fare        Float?
  requestedAt DateTime      @default(now())

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  driver   Driver?  @relation(fields: [driverId], references: [id], onDelete: SetNull)
  company  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("booking")
}

model Location {
  id        Int      @id @default(autoincrement())
  driverId  Int      @unique
  lat       Float
  lng       Float
  updatedAt DateTime @updatedAt

  driver Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@map("location")
}

enum BookingStatus {
  pending
  accepted
  ongoing
  completed
  cancelled
}

enum DriverStatus {
  offline
  online
  on_trip
}
