generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SuperAdmin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("super_admin")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  roleId    Int
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())

  // Add this line to complete the relationship
  notifications Notification[]

  @@map("user")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  permissions RolePermission[]
  users       User[]

  @@map("role")
}

model Permission {
  id    Int              @id @default(autoincrement())
  name  String           @unique
  roles RolePermission[]

  @@map("permission")
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
  @@map("role_permission")
}

model Driver {
  id           Int                  @id @default(autoincrement())
  name         String
  email        String               @unique
  phone        String
  status       DriverStatus         @default(offline)
  vehicleInfo  String
  companyId    Int
  cityId       Int
  timezone     String?
  company      Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  location     Location?
  city         City                 @relation(fields: [cityId], references: [id], onDelete: Cascade)
  bookings     Booking[]
  availability DriverAvailability[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("driver")
}

model City {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Driver Driver[]

  @@map("city")
}

model DriverAvailability {
  id        Int      @id @default(autoincrement())
  driverId  Int
  startTime DateTime
  endTime   DateTime
  driver    Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@map("driver_availability")
}

model Customer {
  id        Int     @id @default(autoincrement())
  name      String
  email     String  @unique
  phone     String
  companyId Int
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  bookings Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customer")
}

model Booking {
  id          Int           @id @default(autoincrement())
  customerId  Int
  driverId    Int?
  companyId   Int
  pickup      String
  dropoff     String
  status      BookingStatus @default(pending)
  fare        Float?
  requestedAt DateTime      @default(now())

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  driver   Driver?  @relation(fields: [driverId], references: [id], onDelete: SetNull)
  company  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Add this line to complete the relationship
  notifications Notification[]

  @@map("booking")
}

model Location {
  id        Int       @id @default(autoincrement())
  driverId  Int       @unique
  lat       Float
  lng       Float
  address   String? // Store the address for display purposes
  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  // Add this if your database supports spatial types
  // location_point Unsupported("POINT")?

  driver Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@map("location")
}

model CompanyContact {
  id        Int      @id @default(autoincrement())
  companyId Int      @unique
  company   Company  @relation(fields: [companyId], references: [id])
  phone     String
  email     String   @unique
  website   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("company_contact")
}

model CompanyAddress {
  id         Int      @id @default(autoincrement())
  companyId  Int
  company    Company  @relation(fields: [companyId], references: [id])
  street     String
  city       String
  state      String
  country    String
  postalCode String
  isPrimary  Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("company_address")
}

model CompanyMedia {
  id        Int       @id @default(autoincrement())
  companyId Int
  company   Company   @relation(fields: [companyId], references: [id])
  type      MediaType // enum for logo, banner, etc.
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("company_media")
}

model CompanyProfile {
  id          Int      @id @default(autoincrement())
  companyId   Int      @unique
  company     Company  @relation(fields: [companyId], references: [id])
  description String
  mission     String?
  vision      String?
  values      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("company_profile")
}

model Company {
  id         Int      @id @default(autoincrement())
  name       String
  isApproved Boolean  @default(false)
  timezone   String   @default("UTC")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  contact   CompanyContact?
  addresses CompanyAddress[]
  media     CompanyMedia[]
  profile   CompanyProfile?
  bookings  Booking[]
  drivers   Driver[]
  customers Customer[]
  users     User[]

  // Add this line to complete the relationship
  notifications Notification[]

  @@map("company")
}

model Notification {
  id        Int              @id @default(autoincrement())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  userId    Int?
  companyId Int?
  bookingId Int?
  createdAt DateTime         @default(now())

  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  booking Booking? @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("notification")
}

enum NotificationType {
  BOOKING_CREATED
  BOOKING_ASSIGNED
  BOOKING_COMPLETED
  BOOKING_CANCELLED
  DRIVER_ASSIGNED
  DRIVER_STATUS_CHANGED
  NEW_USER_REGISTERED
  COMPANY_APPROVED
}

enum MediaType {
  LOGO
  BANNER
  DOCUMENT
  OTHER
}

enum BookingStatus {
  pending
  accepted
  ongoing
  completed
  cancelled
}

enum DriverStatus {
  offline
  online
  on_trip
}
